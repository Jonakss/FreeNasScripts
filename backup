#!/bin/bash

## Parameters
# -n Name of file
# -l location of backup
# -s source
# 
#
# -r Restore Backup

## Variables
log="/var/log/backup.log"
snap="/etc/backup.snap"
d=`date +%d-%m-%y`
h=`date +_%H.%M`
n="DIF"
l="/mnt/USB/"
s="/mnt/Data/"

f=$n"_"$d$h"_"
ctail=full.tar.gz
itail=inc.tar.gz
dtail=dif.tar.gz

backup_days=30

function writeLog {
	local logText=""
	case $2 in
		"d") logText="XXX ";
		echo XXX Danger $1 ;;
		"w") logText="!!! ";
			echo !!! Warning $1 ;;
		"" | "*") logText="   " ;;
	esac
	logText="$logText `date`  `whoami`  $1"
	echo $logText >> $log
}

function sendMail {
	exec &> /dev/null
	mail -s "$1" $2 <<-EOT
	Aviso!: Mensaje autogenerato por servidor de archivos (NAS)

	$3

	EOT
}

## Archivo de configuracion
# backup.rc
function checkConfigurationFile {
[[ -d "$1" ]] || (writeLog "No se encuentra el archivo de configuracion ("$l") o hay permiso de lectura" d; exit -1)
}

function loadConfiguration {
	checkConfigurationFile $1
	writeLog "Cargado informacion desde $1"
}
	
args=("$@")
i=0

function checkLocation {
[[ -d $l ]] || (writeLog "No se encuentra el destino del respaldo ("$l") o no se puede escribir ahi" d; exit -1)
}

function checkSource {
[[ -d $s ]] || (writeLog "No se encuentra el origuen de respaldo ("$s") o no se puede escribir ahi" d; exit -1)
}

function doCompleteBackup {
	checkSource
	checkLocation

	writeLog "Iniciando respaldo completo"
	
	cd $l
	local f=$f$ctail
	TEMP=`mktemp`
	tar -cpzf $f $s -g $snap &>$TEMP
	if [ $? -eq 1 ]; then
		writeLog "$(cat $TEMP)" w
	elif [ $? -ne 0 ]; then
		writeLog "Error al realizar respaldo completo" d
		writeLog "$(cat $TEMP)" d
		sendMail "Error al realizar respaldo completo" "jona.digitaldata@gmail.com" "		
		Origen: $s
		Destino: $l$f
		Tipo de respaldo: Completo
		
		Ultimas 20 lineas de log ($log):

		$(cat $log | tail -20)
		
		"
		[ -o $snap ] && rm $snap
		exit -1
	else
		writeLog "Respaldo completo realizado correctamente $f -> $s"
	fi
}

function doIncrementalBackup {
	checkSource
	checkLocation
	
	cd $l
	tar -cpzf $f $s

	echo Respaldo Incremental $s" > "$l$f
	writeLog "Respaldo incremetal realizado correctamente"
}

function doDiferencialBackup {
	checkSource
	checkLocation

	cd $l
	tar -cpzf $f $s -g ./backup.snap

	echo Respaldo diferencial $s" > "$l$f
	writeLog "Respaldo diferencial realizado correctamente"
}

#function restoreBackup {
	
#}

while [[ $i -lt $# ]]
do
	case ${args[$i]} in
		"-c") loadConfiguration "${args[((i+1))]}";;
		"-s") s="${args[((i+1))]}";;
		"-t") t="${args[((i+1))]}";;
		"-l") l="${args[((i+1))]}";;
	esac
	
i=$((i+1))
done

LS=`mktemp`
LS="$(ls $l$n*)"
writeLog "Eliminando respaldos antiguso ($backup_days dias atras)."
for ff in $LS
do
	
	now=$(date +%s)
	bdis=$(($backup_days*60*60*24))
	ld=$(($now - ($bdis)))
	ld=$(date -u -r $ld +%d-%m-%y)

	dd=$(echo $ff | cut -d "_" -f 2 | cut -d "-" -f 1) 
	mm=$(echo $ff | cut -d "_" -f 2 | cut -d "-" -f 2)
	yy=$(echo $ff | cut -d "_" -f 2 | cut -d "-" -f 3)		

	[ $(( - $ld)) -gt $bdis ] && echo $bdis $now
	[ $(($now - $ld)) -gt $bdis ] && echo $bdis $now
	[ $(($now - $ld)) -gt $bdis ] && echo $bdis $now


done

case $t in
	"i") doIncrementalBackup;;	
	"d") doDiferencialBackup;;	
	"c" | "f" | *) doCompleteBackup;;
esac

unset d
unset s
unset n
unset l
unset i
unset f
unsel ld
unset itail
unset ctail
unset dtail
unset log
unset snap
unset args
unset TEMP

exit 0
